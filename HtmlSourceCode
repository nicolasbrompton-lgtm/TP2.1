<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Bike Catalog — v16 (gallery hierarchy + price list + checkout + NetSuite submit)</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  <style>
    .card-shadow{box-shadow:0 10px 25px rgba(0,0,0,.07),0 2px 8px rgba(0,0,0,.06)}
    .btn-tab{border-bottom-width:2px;border-color:transparent;padding:.75rem 1rem;font-weight:600;color:rgb(115,115,115)}
    .nav-active{background:#111827;color:white;border-radius:.75rem}
    .chip{display:inline-flex;align-items:center;gap:.5rem;padding:.25rem .6rem;border-radius:9999px;border:1px solid rgba(0,0,0,.12);background:white;color:#111827;font-size:.8rem}
    .chip .dot{width:.45rem;height:.45rem;border-radius:9999px;background:currentColor;opacity:.9}
    .sidebar{width:280px}
    @media(max-width:1024px){.sidebar{width:100%}}
    .carousel-viewport{scroll-snap-type:x mandatory; overflow-x:auto; -webkit-overflow-scrolling:touch}
    .carousel-item{flex:0 0 100%; scroll-snap-align:center}
    .carousel-btn{position:absolute; top:50%; transform:translateY(-50%); background:rgba(0,0,0,.6); color:#fff; border-radius:9999px; width:40px; height:40px; display:grid; place-items:center}
    .carousel-btn:hover{background:rgba(0,0,0,.75)}
    .kv-grid{display:grid; grid-template-columns: 1fr 2fr; gap:.5rem .75rem}
    .kv-grid div{padding:.4rem .5rem}
    .kv-key{color:#525252; background:#fafafa; border:1px solid #eee; border-radius:.5rem}
    .kv-val{background:#fff; border:1px solid #eee; border-radius:.5rem}
    .brand-chip{display:inline-flex; align-items:center; gap:.4rem; border:1px solid rgba(0,0,0,.12); background:white; border-radius:9999px; padding:.2rem .5rem}
    .brand-chip img{height:16px}
    .badge{min-width:1.25rem;height:1.25rem;border-radius:9999px;display:grid;place-items:center;font-size:.75rem;background:#ef4444;color:#fff}
    .drawer{position:fixed;right:0;top:0;bottom:0;width:420px;max-width:100%;background:#fff;border-left:1px solid #e5e7eb;box-shadow:-10px 0 25px rgba(0,0,0,.08);transform:translateX(100%);transition:transform .25s ease; z-index:40}
    .drawer.open{transform:translateX(0%)}
    .line{border:1px solid #eee;border-radius:.75rem;padding:.75rem}
    .order-card{border:1px solid #e5e7eb;border-radius:1rem;background:#fff}
    .order-summary-pill{display:inline-flex;align-items:center;gap:.5rem;border:1px solid #e5e7eb;border-radius:9999px;padding:.25rem .6rem;background:#fafafa;font-size:.8rem}
    details.order>summary{list-style:none}
    details.order>summary::-webkit-details-marker{display:none}
    details .lvl{border:1px solid #eee;border-radius:.75rem;padding:.5rem .75rem;margin:.35rem 0;background:#fcfcfc}
    details .lvl summary{cursor:pointer}
    .leaf-line{border:1px solid #eee;border-radius:.75rem;padding:.5rem;display:flex;gap:.6rem;align-items:flex-start;background:#fff}
    .card-price{font-weight:600;margin-top:.2rem}
    .card-price .strike{opacity:.55;text-decoration:line-through;margin-left:.4rem;font-weight:500}
    .group-header{font-weight:700}
    .btn{padding:.5rem .75rem; border:1px solid #e5e7eb; border-radius:.625rem; background:#fff}
    .btn-primary{background:#111827;color:#fff;border-color:#111827}
    .pill{border:1px solid #e5e7eb;border-radius:9999px;padding:.15rem .5rem;font-size:.75rem;background:#fafafa}
    .mono{font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;}
    .json-box{border:1px solid #e5e7eb;border-radius:.75rem;background:#0b1020;color:#e7ecff;padding:1rem;overflow:auto;max-height:420px;font-size:.85rem}
    .header{ z-index:30 }
    #cartOverlay{ position:fixed; inset:0; background:rgba(0,0,0,.4); z-index:35 }
  </style>
</head>
<body class="bg-neutral-50 text-neutral-900">
<header class="sticky top-0 z-20 backdrop-blur bg-white/80 border-b header">
  <div class="max-w-7xl mx-auto px-4 pt-4 flex items-center justify-between">
    <div class="flex items-center gap-3">
      <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-black to-neutral-700 text-white grid place-items-center font-semibold">B</div>
      <div>
        <h1 class="text-xl font-bold tracking-tight">Brompton-style Catalog</h1>
        <p class="text-sm text-neutral-500">See all products • Bike range • Product detail • My order</p>
      </div>
    </div>
    <div class="flex items-center gap-2 sm:gap-3">
      <input id="csvInput" type="file" accept=".csv" class="hidden">
      <button id="loadCsvBtn" class="px-3 py-2 border rounded-lg bg-white">Load CSV</button>

      <input id="priceInput" type="file" accept=".csv" class="hidden">
      <button id="loadPriceBtn" class="px-3 py-2 border rounded-lg bg-white">Load price list CSV</button>

      <label class="text-sm text-neutral-600 ml-1">Country</label>
      <select id="countrySelect" class="border rounded-lg px-3 py-2 bg-white" disabled></select>

      <!-- Basket button -->
      <button id="btnCart" class="ml-1 relative px-3 py-2 border rounded-lg bg-white flex items-center gap-2">
        <span>🧺 Basket</span>
        <span id="cartCount" class="badge">0</span>
      </button>
    </div>
  </div>
  <nav class="max-w-7xl mx-auto px-4 mt-4">
    <div class="flex gap-2">
      <button class="btn-tab nav-active" data-tab="all">See all products</button>
      <button class="btn-tab" data-tab="range">See the bike range</button>
      <button class="btn-tab hidden" data-tab="detail">Product detail</button>
      <button class="btn-tab" data-tab="order">My order</button>
    </div>
  </nav>
</header>

<!-- Drawer: Basket -->
<aside id="cartDrawer" class="drawer">
  <div class="h-full flex flex-col">
    <div class="p-4 border-b flex items-center justify-between">
      <h3 class="text-lg font-semibold">Current Basket</h3>
      <button id="cartClose" class="px-2 py-1 border rounded-lg">✕</button>
    </div>

    <div id="cartLines" class="p-4 space-y-3 overflow-y-auto flex-1"></div>

    <div class="p-4 border-t space-y-3">
      <div class="flex items-center justify-between text-sm text-neutral-700">
        <div id="cartSummary">0 item(s)</div>
        <div class="font-semibold" id="cartSubtotal"></div>
      </div>

      <div class="flex flex-wrap gap-2">
        <button id="cartExportJson" class="btn">Export JSON</button>
        <button id="cartClear" class="btn">Clear basket</button>
        <button id="cartComplete" class="btn btn-primary">Complete basket → Order</button>
      </div>

      <!-- Hidden modal for JSON preview from Cart -->
      <dialog id="jsonModal" class="p-0 rounded-2xl w-[min(880px,95vw)]">
        <div class="p-4 border-b flex items-center justify-between">
          <div class="font-semibold">Checkout JSON</div>
          <button data-close class="btn">Close</button>
        </div>
        <div class="p-4">
          <div id="jsonMeta" class="mb-2 text-sm text-neutral-600"></div>
          <pre id="jsonOutput" class="json-box mono"></pre>
          <div class="mt-3 flex gap-2">
            <button id="jsonCopy" class="btn">Copy</button>
            <button id="jsonDownload" class="btn btn-primary">Download JSON</button>
          </div>
        </div>
      </dialog>
    </div>
  </div>
</aside>
<!-- Overlay for basket drawer -->
<div id="cartOverlay" class="hidden"></div>

<main class="max-w-7xl mx-auto px-4 py-8 space-y-10">
  <!-- ALL PRODUCTS -->
  <section id="tab-all" class="block">
    <div class="lg:grid lg:grid-cols-[280px_1fr] lg:gap-6">
      <aside class="sidebar mb-6 lg:mb-0">
        <div class="rounded-2xl bg-white border card-shadow p-4">
          <div class="flex items-center justify-between mb-2">
            <h2 class="text-base font-semibold">Filters</h2>
            <button id="clearFilters" class="text-sm underline">Clear all</button>
          </div>
          <div id="filtersContainer" class="space-y-5">
            <!-- PRODUCT TYPE (radio) -->
            <div id="flt-producttype" class="hidden"></div>
            <div id="flt-handlebar" class="hidden"></div>
            <div id="flt-colour" class="hidden"></div>
            <div id="flt-speed" class="hidden"></div>
            <div id="flt-rack" class="hidden"></div>
            <div id="flt-extra" class="space-y-4"></div>
          </div>
        </div>
      </aside>
      <div>
        <div id="stats" class="mb-2 text-sm text-neutral-600">Load a CSV to begin.</div>

        <!-- Expand/Collapse + Sort -->
        <div class="mb-3 flex items-center gap-2 flex-wrap">
          <button id="expandAll" class="px-2 py-1 border rounded bg-white text-sm">Expand all</button>
          <button id="collapseAll" class="px-2 py-1 border rounded bg-white text-sm">Collapse all</button>
          <span class="inline-flex items-center gap-2 ml-2">
            <label for="sortMode" class="text-sm text-neutral-700">Sort:</label>
            <select id="sortMode" class="px-2 py-1 border rounded bg-white text-sm">
              <option value="sku_asc">SKU code A→Z</option>
              <option value="sku_desc">SKU code Z→A</option>
              <option value="price_asc">Price: cheapest → most expensive</option>
              <option value="disc_pct_desc">Highest discount % → lowest %</option>
              <option value="disc_val_desc">Highest discount value → lowest</option>
            </select>
          </span>
        </div>

        <!-- Grouped gallery container -->
        <div id="grid" class="space-y-3"></div>
      </div>
    </div>
  </section>

  <!-- BIKE RANGE (unchanged visual) -->
  <section id="tab-range" class="hidden">
    <div class="rounded-2xl bg-white border card-shadow p-6">
      <div class="space-y-4">
        <div>
          <div class="text-sm text-neutral-600 mb-2">Select range</div>
          <div id="range-h2" class="flex flex-wrap gap-2"></div>
        </div>
        <div id="range-h3-block" class="hidden">
          <div class="text-sm text-neutral-600 mb-2">Select sub-range</div>
          <div id="range-h3" class="flex flex-wrap gap-2"></div>
        </div>
      </div>
    </div>
    <div class="mt-6 text-sm text-neutral-600" id="range-stats"></div>
    <div class="mt-4 grid gap-5 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4" id="range-grid"></div>
  </section>

  <!-- PRODUCT DETAIL (One-screen layout) -->
  <section id="tab-detail" class="hidden">
    <div id="pd-sticky" class="sticky top-[4.75rem] z-10 border rounded-2xl card-shadow overflow-hidden">
      <div id="pd-sticky-bar" class="px-4 py-3 flex flex-wrap items-center gap-2 justify-between">
        <div class="flex flex-wrap items-center gap-2" id="pd-sticky-title"></div>
        <div class="flex items-center gap-3">
          <div id="pd-price" class="text-base font-semibold"></div>
          <div class="flex items-center gap-1">
            <button id="pd-stk-qtyMinus" class="px-2 py-1 border rounded text-sm">−</button>
            <input id="pd-stk-qty" type="number" min="1" value="1" class="w-14 border rounded px-2 py-1 text-sm">
            <button id="pd-stk-qtyPlus" class="px-2 py-1 border rounded text-sm">+</button>
          </div>
          <button id="pd-stk-add" class="px-3 py-1.5 rounded-lg bg-black text-white text-sm">Add to basket</button>
          <img id="pd-brand-logo" class="h-8" alt="Brand Logo" />
          <button id="btnBackToAll" class="px-3 py-1.5 text-sm rounded-lg border bg-white">← Back to all products</button>
        </div>
      </div>
    </div>

    <div class="mt-4 grid gap-6 md:grid-cols-2">
      <!-- LEFT: Carousel -->
      <div class="relative rounded-2xl overflow-hidden bg-white border card-shadow">
        <div id="pd-carousel" class="carousel-viewport flex"></div>
        <button id="pd-prev" class="carousel-btn left-3" aria-label="Previous image">‹</button>
        <button id="pd-next" class="carousel-btn right-3" aria-label="Next image">›</button>
      </div>

      <!-- RIGHT: Overview panel -->
      <div class="rounded-2xl bg-white border card-shadow p-6 space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold">Overview</h2>
          <div id="pd-price-side" class="text-lg font-semibold"></div>
        </div>

        <div class="flex items-center gap-3">
          <label class="text-sm text-neutral-700">Quantity</label>
          <div class="flex items-center gap-1">
            <button id="qtyMinus" class="px-2 py-1 border rounded">−</button>
            <input id="qtyInput" type="number" min="1" value="1" class="w-16 border rounded px-2 py-1">
            <button id="qtyPlus" class="px-2 py-1 border rounded">+</button>
          </div>
          <button id="btnAddToCart" class="ml-auto px-4 py-2 rounded-lg bg-black text-white">Add to basket</button>
        </div>

        <div>
          <h3 class="text-sm font-semibold mb-2">Key Specifications</h3>
          <div id="pd-specs-key" class="kv-grid"></div>
          <div id="pd-specs-empty" class="text-sm text-neutral-500 hidden">No specifications available.</div>
        </div>
      </div>
    </div>

    <!-- Extended specs + delivery -->
    <div class="mt-6 grid gap-6 md:grid-cols-2">
      <div class="rounded-2xl bg-white border card-shadow p-6">
        <h2 class="text-lg font-semibold mb-3">All Specifications</h2>
        <div id="pd-specs" class="kv-grid"></div>
      </div>
      <div class="rounded-2xl bg-white border card-shadow p-6">
        <h2 class="text-lg font-semibold mb-3">Delivery & Returns</h2>
        <div id="pd-delivery" class="kv-grid"></div>
        <div id="pd-delivery-empty" class="text-sm text-neutral-500 hidden">No delivery information.</div>
      </div>
    </div>
  </section>

  <!-- MY ORDER -->
  <section id="tab-order" class="hidden">
    <div class="rounded-2xl bg-white border card-shadow p-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg font-semibold">My Orders</h2>
        <div class="text-sm text-neutral-600" id="ordersMeta"></div>
      </div>

      <div id="ordersList" class="space-y-4"></div>
      <div id="ordersEmpty" class="text-sm text-neutral-500">No orders yet.</div>
    </div>
  </section>
</main>

<!-- CARD TEMPLATE -->
<template id="cardTemplate">
  <div class="rounded-2xl overflow-hidden bg-white card-shadow border hover:shadow-lg transition cursor-pointer">
    <div class="aspect-[4/3] bg-neutral-100 overflow-hidden">
      <img class="w-full h-full object-cover" loading="lazy" />
    </div>
    <div class="p-4 space-y-2">
      <div class="text-sm font-semibold" data-title></div>
      <div class="flex flex-wrap items-center gap-2 text-xs" data-chips></div>
      <div class="card-price text-sm" data-price></div>
    </div>
  </div>
</template>

<script>
/* ==============================
   DATA + STATE
============================== */
let DATA = null;
window.DATA = null;
let countryCols = [];
let countryCodes = [];
let _allTabScrollY = 0; // store scroll position
const state = {
  countryIndex: 0,
  filters: {},
  detailId: null,
  // gallery range filters (H1/H2/H3)
  hier: { h1:null, h2:null, h3:null },
  // range page (kept as-is)
  h2: null,
  h3: null,
  // prices
  priceMap: {}, // { [CC]: { [SKU]: {currency,list,sale} } }
  cart: { items: [] },
  orders: []
};

/* ==============================
   HELPERS
============================== */
function truthy(v){ if(v===undefined||v===null) return false; const s=String(v).trim().toLowerCase(); if(!s) return false; return !["0","no","false","n","none","null","x"].includes(s); }
function nonEmpty(v){ return (v!==undefined && v!==null && String(v).trim()!==""); }
function unique(arr){ return [...new Set(arr)]; }
function skuKey(s){ return String(s||"").trim().toUpperCase(); } // normalize SKUs for price matching

function setActiveTab(id){
  ["all","range","detail","order"].forEach(t=>{
    const tabBtn = document.querySelector(`[data-tab="${t}"]`);
    tabBtn?.classList.toggle("nav-active", t===id);
    const tab = document.getElementById(`tab-${t}`);
    tab?.classList.toggle("hidden", t!==id);
    tab?.classList.toggle("block", t===id);
  });
}
function availableInSelectedCountry(row){ if(!countryCols.length) return true; const col=countryCols[state.countryIndex]; return truthy((row.countries||{})[col]); }
function findFilterKey(name){
  if(!DATA) return null;
  const target=name.toLowerCase().replace(/\s+/g,"");
  const entry=(DATA.filters||[]).find(f=>f.key.toLowerCase().replace(/\s+/g,"")===target);
  return entry ? entry.key : null;
}
function cleanLabel(s){ return String(s||"").trim().replace(/^\s*\/+/,"").replace(/\/+\s*$/,"").replace(/\//g," ").trim(); }
function detectCol(columns, patterns){
  const norm = s => String(s||"").toLowerCase().replace(/[\s_]/g,"");
  for(const p of patterns){
    const found = columns.find(c => norm(c)===norm(p));
    if(found) return found;
  }
  for(const c of columns){
    const lc = norm(c);
    if(patterns.some(p => lc.includes(norm(p)))) return c;
  }
  return null;
}
function prettyLabelFromColumn(col){
  if(!col) return "";
  let lbl = String(col);
  lbl = lbl.replace(/^SPEC_?/i,"");
  lbl = lbl.replace(/^DELIVERY__?/i,"");
  lbl = lbl.replace(/__/g," ");
  lbl = lbl.replace(/_/g," ");
  return lbl.trim();
}
function getRowById(id){ return (DATA?.rows||[]).find(r=>r.uid===id); }
function groupBy(arr, keyFn){
  const map=new Map();
  arr.forEach(it=>{
    const k = keyFn(it) ?? "";
    const prev = map.get(k);
    map.set(k, prev ? [...prev, it] : [it]);
  });
  return map;
}
function sumQty(items){ return items.reduce((a,b)=>a+(b.qty||0),0); }
function currentCountryCode(){ return countryCols.length ? countryCodes[state.countryIndex] : null; }

/* ==============================
   PRICE + SORT HELPERS
============================== */
function formatMoney(cur, value){
  if(value==null || value==="") return "";
  const v = Number(value);
  if(!isFinite(v)) return "";
  const iso = String(cur||"").trim().toUpperCase();
  try{
    return new Intl.NumberFormat(undefined, {style:"currency", currency: iso}).format(v);
  }catch{
    return `${iso} ${v.toFixed(2)}`.trim();
  }
}
function getPriceForSku(sku){
  const cc = currentCountryCode();
  if(!cc || !state.priceMap[cc]) return null;
  return state.priceMap[cc][ skuKey(sku) ] || null;
}
function getUnitPrice(row){
  const p = getPriceForSku(row.sku);
  if(!p) return {currency:null, unit:null, list:null, sale:null};
  const unit = nonEmpty(p.sale) ? Number(p.sale) : Number(p.list);
  return {currency: p.currency || null, unit, list: p.list ?? null, sale: p.sale ?? null};
}
function priceLabelForRow(row){
  const p = getPriceForSku(row.sku);
  if(!p) return "";
  if(nonEmpty(p.sale)){
    return `<span>${formatMoney(p.currency, p.sale)}</span><span class="strike">${formatMoney(p.currency, p.list)}</span>`;
  }
  return `<span>${formatMoney(p.currency, p.list)}</span>`;
}

/* Sort persistence + comparators */
const SORT_KEY = "bike_app_sort_mode";
function getSortMode(){ return localStorage.getItem(SORT_KEY) || "sku_asc"; }
function setSortMode(v){ localStorage.setItem(SORT_KEY, v); }
function priceInfo(row){
  const p = getUnitPrice(row);
  const unit = (p && isFinite(p.unit)) ? Number(p.unit) : null;
  const list = (p && isFinite(p.list)) ? Number(p.list) : null;
  const sale = (p && isFinite(p.sale)) ? Number(p.sale) : null;
  const hasDisc = (isFinite(list) && isFinite(sale) && sale < list);
  const discVal = hasDisc ? (list - sale) : 0;
  const discPct = hasDisc && list>0 ? (discVal / list) : 0;
  return { unit, list, sale, discVal, discPct, priced: unit!=null };
}
function bySort(mode){
  switch(mode){
    case "sku_asc":   return (a,b)=>String(a.sku||"").localeCompare(String(b.sku||""));
    case "sku_desc":  return (a,b)=>String(b.sku||"").localeCompare(String(a.sku||""));
    case "price_asc": return (a,b)=>{
      const A=priceInfo(a), B=priceInfo(b);
      if(A.priced && !B.priced) return -1;
      if(!A.priced && B.priced) return  1;
      if(!A.priced && !B.priced) return String(a.sku||"").localeCompare(String(b.sku||""));
      return A.unit - B.unit;
    };
    case "disc_pct_desc": return (a,b)=>{
      const A=priceInfo(a), B=priceInfo(b);
      if(A.priced && !B.priced) return -1;
      if(!A.priced && B.priced) return  1;
      if(!A.priced && !B.priced) return 0;
      if(B.discPct !== A.discPct) return B.discPct - A.discPct;
      return A.unit - B.unit;
    };
    case "disc_val_desc": return (a,b)=>{
      const A=priceInfo(a), B=priceInfo(b);
      if(A.priced && !B.priced) return -1;
      if(!A.priced && B.priced) return  1;
      if(!A.priced && !B.priced) return 0;
      if(B.discVal !== A.discVal) return B.discVal - A.discVal;
      return A.unit - B.unit;
    };
    default: return ()=>0;
  }
}

/* ==============================
   CSV -> DATA
============================== */
function buildDATA(parsed){
  const rowsRaw = parsed.data;
  const cols = parsed.meta.fields || Object.keys(rowsRaw[0]||{});

  const sku = detectCol(cols, [
    "SKU Code","SKU","Sku Code","Sku",
    "Product SKU","Product_Sku",
    "Product ID","Code","id"
  ]);
  const h1  = detectCol(cols, ["Product Hierarchy 1","ProductHierarchy1","Hierarchy1","Product Hierachy 1","ProductHierachy1"]);
  const h2  = detectCol(cols, ["Product Hierarchy 2","ProductHierarchy2","Hierarchy2","Product Hierachy 2","ProductHierachy2"]);
  const h3  = detectCol(cols, ["Product Hierarchy 3","ProductHierarchy3","Hierarchy3","Product Hierachy 3","ProductHierachy3"]);
  const h4  = detectCol(cols, ["Product Hierarchy 4","ProductHierarchy4","Hierarchy4","Product Hierachy 4","ProductHierachy4"]);
  const img1 = detectCol(cols, ["Picture 1","Image","Img","Picture"]);
  const pictureCols = cols.filter(c=>/^picture\b/i.test(c));
  const brandLogoCol = cols.find(c=>c.toLowerCase()==="brand__logo") || cols.find(c=>c.toLowerCase().includes("brand") && c.toLowerCase().includes("logo"));
  const stickyBgCol  = cols.find(c=>c.toLowerCase()==="sticky-bar__background") || cols.find(c=>c.toLowerCase().includes("sticky") && c.toLowerCase().includes("background"));
  const bikeCfgCol   = cols.find(c=>c.toLowerCase()==="bikeconfigcode") || cols.find(c=>c.toLowerCase().includes("bike") && c.toLowerCase().includes("config"));

  const countryColsDetected = cols.filter(c=>c.toLowerCase().replace(/\s|_/g,"").startsWith("country"));
  const filterCols = cols.filter(c=>c.toLowerCase().startsWith("filter"));
  const specCols = cols.filter(c=>/^spec_/i.test(c));
  const deliveryCols = cols.filter(c=>/^delivery__/i.test(c));
  const distinct = (arr)=>[...new Set(arr.map(v=>String(v||"").trim()).filter(v=>v && v!=="nan" && v!=="None"))].sort();

  const rows = rowsRaw.map((r,i)=>{
    if(!r || Object.values(r).every(v => String(v||"").trim()==="")) return null;

    const countries_map = Object.fromEntries(countryColsDetected.map(c=>[c, r[c] ?? ""]));
    const images = pictureCols.map(c=>String(r[c]||"").trim()).filter(nonEmpty);
    const spec = Object.fromEntries(specCols.map(c=>[c, r[c]]));
    const delivery = Object.fromEntries(deliveryCols.map(c=>[c, r[c]]));

    return {
      uid: i,
      sku: (sku ? r[sku] : Object.values(r)[1]) ?? "",
      bike_config: bikeCfgCol ? (r[bikeCfgCol]||"") : "",
      img: r[img1] ?? "",
      images,
      h1: cleanLabel(r[h1] ?? ""),
      h1_raw: r[h1] ?? "",
      h2: cleanLabel(r[h2] ?? ""),
      h3: cleanLabel(r[h3] ?? ""),
      h4: cleanLabel(r[h4] ?? ""),
      brand_logo: brandLogoCol ? (r[brandLogoCol]||"") : "",
      sticky_bg:  stickyBgCol ? (r[stickyBgCol]||"") : "",
      spec,
      delivery,
      countries: countries_map,
      available: countryColsDetected.filter(c=>truthy(r[c])).map(c=>c.replace(/^Country/i,"").replace(/[ _-]/g,"").toUpperCase()),
      filters: Object.fromEntries(filterCols.map(fc=>[fc, String(r[fc] ?? "").trim()])),
      raw: r
    };
  }).filter(Boolean);

  const filters_meta = filterCols.map(fc=>({ key: fc, label: fc, values: distinct(rowsRaw.map(r=>r[fc])) }));

  DATA = {
    country_cols: countryColsDetected,
    rows,
    filters: filters_meta,
    meta: {skuCol: sku, pictureCols, brandLogoCol, stickyBgCol, filterCols, cols, specCols, deliveryCols, bikeCfgCol}
  };
  window.DATA = DATA;

  countryCols = DATA.country_cols || [];
  countryCodes = countryCols.map(c=>c.replace(/^Country/i,"").replace(/[ _-]/g,"").toUpperCase());
}

/* ==============================
   HIERARCHY FILTERS (Top ribbon REMOVED)
============================== */
function buildHierarchyPanel(){ /* removed top ribbon */ }
function currentPool(){ return (DATA?.rows||[]).filter(availableInSelectedCountry); }

/* ==============================
   PROGRESSIVE FILTERS (sidebar)
============================== */
function valueSet(rows, key){ return unique(rows.map(r=> (r.filters||{})[key]).filter(nonEmpty)).sort(); }
function domClear(containerId){
  const box=document.getElementById(containerId);
  if(!box) return;
  box.querySelectorAll('input[type="radio"], input[type="checkbox"]').forEach(i=>{ i.checked=false; });
  box.innerHTML=""; box.classList.add("hidden");
}
function clearDownstream(fromKey, map){
  const {keyHandlebar,keyColour,keySpeed,keyRack} = map;
  if(fromKey===keyHandlebar){
    if(keyColour) { delete state.filters[keyColour]; domClear("flt-colour"); }
    if(keySpeed)  { delete state.filters[keySpeed];  domClear("flt-speed");  }
    if(keyRack)   { delete state.filters[keyRack];   domClear("flt-rack");   }
  } else if(fromKey===keyColour){
    if(keySpeed)  { delete state.filters[keySpeed];  domClear("flt-speed");  }
    if(keyRack)   { delete state.filters[keyRack];   domClear("flt-rack");   }
  } else if(fromKey===keySpeed){
    if(keyRack)   { delete state.filters[keyRack];   domClear("flt-rack");   }
  }
}
function clearAllFilters(){
  state.filters = {};
  ["flt-producttype","flt-handlebar","flt-colour","flt-speed","flt-rack","flt-extra"].forEach(domClear);
}
function buildGroupRadio(containerId, key, title, upstreamKeys, onChange){
  const el=document.getElementById(containerId); el.innerHTML="";
  if(!key){ el.classList.add("hidden"); return; }
  const pool = currentPool().filter(r=>{
    for(const uk of (upstreamKeys||[])){
      const s=state.filters[uk];
      if(s && s.size && !s.has((r.filters||{})[uk])) return false;
    }
    return true;
  });
  const values = valueSet(pool, key);
  if(!values.length){ el.classList.add("hidden"); return; }
  el.classList.remove("hidden");
  const titleEl=document.createElement("div"); titleEl.className="text-sm font-medium mb-1"; titleEl.textContent=title; el.appendChild(titleEl);
  const wrap=document.createElement("div"); wrap.className="space-y-1"; el.appendChild(wrap);
  const selected = state.filters[key] ? Array.from(state.filters[key])[0] : null;
  values.forEach(val=>{
    const id=`radio-${key.replace(/\W/g,'_')}-${val.replace(/\W/g,'_')}`;
    const row=document.createElement("label"); row.className="flex items-center gap-2 text-sm";
    row.innerHTML = `<input type="radio" name="${key}" id="${id}" value="${val}" ${selected===val?"checked":""}><span>${val}</span>`;
    row.querySelector("input").addEventListener("change", e=>{
      state.filters[key]= new Set([e.target.value]);
      onChange && onChange();
    });
    wrap.appendChild(row);
  });
}
function buildExtras(){
  const extra=document.getElementById("flt-extra"); extra.innerHTML="";
  const known = new Set((DATA?.filters||[]).map(f=>f.key).filter(k=>{
    const lc=k.toLowerCase();
    return ["filter handlebar","filter colour","filter color","filter speed","filter rack"]
      .some(name=>lc.replace(/\s+/g,"")===name.replace(/\s+/g,""));
  }));
  (DATA?.filters||[]).forEach(f=>{
    if(known.has(f.key)) return;
    const box=document.createElement("div");
    box.innerHTML = '<div class="text-sm font-medium mb-1">'+f.label+'</div><div class="space-y-1" data-extra-group="'+f.key+'"></div>';
    extra.appendChild(box);
    const group=box.querySelector("[data-extra-group]");
    (f.values||[]).forEach(val=>{
      const id='flt-'+f.key.replace(/\W/g,'_')+'-'+String(val).replace(/\W/g,'_');
      const row=document.createElement("label"); row.className="flex items-center gap-2 text-sm";
      row.innerHTML = '<input type="checkbox" id="'+id+'" value="'+val+'"><span>'+val+'</span>';
      row.querySelector("input").addEventListener("change", e=>{
        const sel = state.filters[f.key] || new Set();
        if(e.target.checked) sel.add(e.target.value); else sel.delete(e.target.value);
        if(sel.size) state.filters[f.key]=sel; else delete state.filters[f.key];
        renderAll();
      });
      group.appendChild(row);
    });
  });
}
function buildProgressiveFilters(){
  const keyHandlebar = findFilterKey("Filter Handlebar");
  const keyColour    = findFilterKey("Filter Colour") || findFilterKey("Filter Color");
  const keySpeed     = findFilterKey("Filter Speed");
  const keyRack      = findFilterKey("Filter Rack");
  const map = {keyHandlebar,keyColour,keySpeed,keyRack};

  // PRODUCT TYPE first (drives state.hier.h1)
  (function buildProductType(){
    const el = document.getElementById("flt-producttype");
    if(!el) return;
    el.innerHTML = "";
    const pool = (DATA?.rows||[]).filter(availableInSelectedCountry);
    const values = [...new Set(pool.map(r=>r.h1).filter(nonEmpty))].sort();
    if(!values.length){ el.classList.add("hidden"); return; }
    el.classList.remove("hidden");
    const title = document.createElement("div");
    title.className = "text-sm font-medium mb-1";
    title.textContent = "Product type";
    el.appendChild(title);
    const wrap = document.createElement("div");
    wrap.className = "space-y-1";
    el.appendChild(wrap);

    const any = document.createElement("label");
    any.className = "flex items-center gap-2 text-sm";
    any.innerHTML = `<input type="radio" name="producttype" value="" ${!state.hier.h1?"checked":""}><span>All</span>`;
    any.querySelector("input").addEventListener("change",()=>{
      state.hier.h1 = null; state.hier.h2 = null; state.hier.h3 = null;
      clearCoreFiltersOnly();
      buildProgressiveFilters();
      renderAll();
    });
    wrap.appendChild(any);

    values.forEach(v=>{
      const id = `radio-producttype-${v.replace(/\W/g,'_')}`;
      const row = document.createElement("label");
      row.className = "flex items-center gap-2 text-sm";
      row.innerHTML = `<input type="radio" name="producttype" id="${id}" value="${v}" ${state.hier.h1===v?"checked":""}><span>${v}</span>`;
      row.querySelector("input").addEventListener("change",(e)=>{
        state.hier.h1 = e.target.value || null;
        state.hier.h2 = null; state.hier.h3 = null;
        clearCoreFiltersOnly();
        buildProgressiveFilters();
        renderAll();
      });
      wrap.appendChild(row);
    });
  })();

  buildGroupRadio("flt-handlebar", keyHandlebar, "Filter Handlebar", [], ()=>{
    clearDownstream(keyHandlebar, map); buildProgressiveFilters(); renderAll();
  });

  const hasHandlebar = keyHandlebar && state.filters[keyHandlebar] && state.filters[keyHandlebar].size>0;
  if(hasHandlebar){
    buildGroupRadio("flt-colour", keyColour, "Filter Colour", [keyHandlebar], ()=>{
      clearDownstream(keyColour, map); buildProgressiveFilters(); renderAll();
    });
  } else { clearDownstream(keyHandlebar, map); }

  const hasColour = keyColour && state.filters[keyColour] && state.filters[keyColour].size>0;
  if(hasHandlebar && hasColour){
    buildGroupRadio("flt-speed", keySpeed, "Filter Speed", [keyHandlebar,keyColour], ()=>{
      clearDownstream(keySpeed, map); buildProgressiveFilters(); renderAll();
    });
  } else if(hasHandlebar){ clearDownstream(keyColour, map); }

  const hasSpeed = keySpeed && state.filters[keySpeed] && state.filters[keySpeed].size>0;
  if(hasHandlebar && hasColour && hasSpeed){
    buildGroupRadio("flt-rack", keyRack, "Filter Rack", [keyHandlebar,keyColour,keySpeed], ()=>{
      clearDownstream(keyRack, map); buildProgressiveFilters(); renderAll();
    });
  } else if(hasHandlebar && hasColour){ clearDownstream(keySpeed, map); }

  buildExtras();

  document.getElementById("clearFilters").onclick = ()=>{
    clearAllFilters(); buildProgressiveFilters(); renderAll();
  };
}
function clearCoreFiltersOnly(){
  const keyHandlebar = findFilterKey("Filter Handlebar");
  const keyColour    = findFilterKey("Filter Colour") || findFilterKey("Filter Color");
  const keySpeed     = findFilterKey("Filter Speed");
  const keyRack      = findFilterKey("Filter Rack");
  const ids = [];
  if(keyHandlebar){ delete state.filters[keyHandlebar]; ids.push("flt-handlebar"); }
  if(keyColour){ delete state.filters[keyColour]; ids.push("flt-colour"); }
  if(keySpeed){ delete state.filters[keySpeed]; ids.push("flt-speed"); }
  if(keyRack){ delete state.filters[keyRack]; ids.push("flt-rack"); }
  ids.forEach(domClear);
}

/* ==============================
   FILTER APPLICATION
============================== */
function passesHierarchy(row){
  if(state.hier.h1 && row.h1 !== state.hier.h1) return false;
  if(state.hier.h2 && row.h2 !== state.hier.h2) return false;
  if(state.hier.h3 && row.h3 !== state.hier.h3) return false;
  return true;
}
function passesFilters(row){
  if(!passesHierarchy(row)) return false;

  const keyHandlebar = findFilterKey("Filter Handlebar");
  const keyColour    = findFilterKey("Filter Colour") || findFilterKey("Filter Color");
  const keySpeed     = findFilterKey("Filter Speed");
  const keyRack      = findFilterKey("Filter Rack");
  if(keyHandlebar){ const s=state.filters[keyHandlebar]; if(s && s.size && !s.has((row.filters||{})[keyHandlebar])) return false; }
  if(keyColour){ const s=state.filters[keyColour]; if(s && s.size && !s.has((row.filters||{})[keyColour])) return false; }
  if(keySpeed){ const s=state.filters[keySpeed]; if(s && s.size && !s.has((row.filters||{})[keySpeed])) return false; }
  if(keyRack){ const s=state.filters[keyRack]; if(s && s.size && !s.has((row.filters||{})[keyRack])) return false; }

  const core = new Set([keyHandlebar,keyColour,keySpeed,keyRack].filter(Boolean));
  for(const f of (DATA?.filters||[])){
    if(core.has(f.key)) continue;
    const set = state.filters[f.key];
    if(set && set.size){
      const val=(row.filters||{})[f.key]||"";
      if(!set.has(val)) return false;
    }
  }
  return true;
}

/* ==============================
   GALLERY CARDS
============================== */
function chip(text){ const el=document.createElement("span"); el.className="chip"; el.textContent=text; return el; }
function brandChip(src){
  const w=document.createElement("span");
  w.className="brand-chip";
  if(src){ const i=document.createElement("img"); i.src=src; i.alt="Brand"; w.appendChild(i); }
  const t=document.createElement("span"); t.textContent="Brand"; w.appendChild(t);
  return w;
}
function cardFor(row){
  const t=document.getElementById("cardTemplate");
  const n=t.content.cloneNode(true);
  const img=n.querySelector("img");
  const title=n.querySelector("[data-title]");
  const chipsWrap=n.querySelector("[data-chips]");
  const priceEl=n.querySelector("[data-price]");

  const firstImg = (row.images && row.images.length ? row.images[0] : row.img) || "";
  img.src=firstImg.trim() || "https://placehold.co/600x450?text=No+Image";
  img.alt=row.sku||"Product image";

  title.textContent = [row.h3||"", row.h2||""].filter(nonEmpty).join(" • ");

  const kColour = findFilterKey("Filter Colour") || findFilterKey("Filter Color");
  const kHandle = findFilterKey("Filter Handlebar");
  const kSpeed  = findFilterKey("Filter Speed");
  const kRack   = findFilterKey("Filter Rack");
  const vColour = kColour ? (row.filters||{})[kColour] : "";
  const vHandle = kHandle ? (row.filters||{})[kHandle] : "";
  const vSpeed  = kSpeed  ? (row.filters||{})[kSpeed]  : "";
  const vRack   = kRack   ? (row.filters||{})[kRack]   : "";

  chipsWrap.innerHTML="";
  if(nonEmpty(row.brand_logo)) chipsWrap.appendChild(brandChip(row.brand_logo));
  if(nonEmpty(vHandle)) chipsWrap.appendChild(chip(vHandle));
  if(nonEmpty(vSpeed))  chipsWrap.appendChild(chip(vSpeed));
  if(nonEmpty(vColour)) chipsWrap.appendChild(chip(vColour));
  if(nonEmpty(vRack))   chipsWrap.appendChild(chip(vRack));

  // Price
  priceEl.innerHTML = priceLabelForRow(row);

  // Open detail on card click
  const cardRoot = n.querySelector(".rounded-2xl");
  cardRoot.addEventListener("click", ()=>{
    _allTabScrollY = window.scrollY || 0; // save scroll position before switching
    state.detailId = row.uid;
    renderDetail();
    setActiveTab("detail");
    document.querySelector('[data-tab="detail"]')?.classList.add("hidden");
  });

  // Quick add "+"
  cardRoot.style.position = "relative";
  const quickBtn = document.createElement("button");
  quickBtn.className = "absolute right-2 top-2 btn btn-primary";
  quickBtn.style.zIndex = "1";
  quickBtn.textContent = "+";
  quickBtn.title = "Add 1 to basket";
  quickBtn.addEventListener("click",(e)=>{
    e.stopPropagation();
    addToCart(row, 1);
    updateCartBadge();
  });
  cardRoot.appendChild(quickBtn);

  return n;
}

/* ==============================
   GROUPED GALLERY RENDER (H1 → H2 → H3)
============================== */
function sectionSummary(label, count){
  const span=document.createElement("span");
  span.className="text-sm text-neutral-600";
  span.textContent=`— ${count} item(s)`;
  const b=document.createElement("span");
  b.className="group-header";
  b.textContent=label || "(Uncategorized)";
  const wrap=document.createElement("span");
  wrap.appendChild(b);
  wrap.appendChild(document.createTextNode(" "));
  wrap.appendChild(span);
  return wrap;
}
function renderAll(){
  const grid=document.getElementById("grid");
  const stats=document.getElementById("stats");
  if(!DATA){ grid.innerHTML=""; stats.textContent="Load a CSV to begin."; return; }

  const rows=(DATA.rows||[]).filter(availableInSelectedCountry).filter(passesFilters);
  stats.textContent = 'Showing '+rows.length+' item(s)';

  const byH1 = groupBy(rows, r=>r.h1 || "(No H1)");
  grid.innerHTML="";
  byH1.forEach((listH1, h1)=>{
    const d1=document.createElement("details");
    d1.className="lvl";
    d1.open = true; // H1 expanded by default
    const h1Count=listH1.length;
    d1.innerHTML = `<summary class="cursor-pointer">${sectionSummary(h1, h1Count).outerHTML}</summary>`;
    grid.appendChild(d1);

    const byH2 = groupBy(listH1, r=>r.h2 || "(No H2)");
    byH2.forEach((listH2, h2)=>{
      const d2=document.createElement("details");
      d2.className="lvl ml-3";
      d2.open = true; // H2 expanded by default
      const h2Count=listH2.length;
      d2.innerHTML = `<summary class="cursor-pointer">${sectionSummary(h2, h2Count).outerHTML}</summary>`;
      d1.appendChild(d2);

      const byH3 = groupBy(listH2, r=>r.h3 || "(No H3)");
      byH3.forEach((listH3, h3)=>{
        const d3=document.createElement("details");
        d3.className="lvl ml-6";
        d3.open = false; // H3 collapsed by default
        const h3Count=listH3.length;
        d3.innerHTML = `<summary class="cursor-pointer">${sectionSummary(h3, h3Count).outerHTML}</summary>`;
        d2.appendChild(d3);

        const wrap=document.createElement("div");
        wrap.className="mt-2 grid gap-5 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4";
        const mode = getSortMode();
        const sorted = [...listH3].sort(bySort(mode));
        sorted.forEach(r=> wrap.appendChild(cardFor(r)));
        d3.appendChild(wrap);
      });
    });
  });
}

/* ==============================
   BIKE RANGE (unchanged logic)
============================== */
function isBike(row){
  const cleaned=(row.h1||'').toString().trim().toLowerCase();
  const raw=(row.h1_raw||'').toString().trim().toLowerCase();
  const noSlash=raw.replace(/^\s*\/+/,'').replace(/\/+\s*$/,'').replace(/\//g,' ').trim();
  return cleaned==='bike'||noSlash==='bike'||raw.includes('bike');
}
function renderRange(){
  const grid=document.getElementById("range-grid");
  const stats=document.getElementById("range-stats");
  const elH2=document.getElementById("range-h2");
  const elH3blk=document.getElementById("range-h3-block");
  const elH3=document.getElementById("range-h3");
  if(!DATA){ grid.innerHTML=""; stats.textContent=""; elH2.innerHTML=""; elH3.innerHTML=""; elH3blk.classList.add("hidden"); return; }

  const bikesOnly=(DATA.rows||[]).filter(availableInSelectedCountry).filter(isBike);
  const h2Choices=[...new Set(bikesOnly.map(r=>r.h2).filter(nonEmpty))].sort();
  elH2.innerHTML=''; elH3.innerHTML=''; elH3blk.classList.add("hidden");
  h2Choices.forEach(choice=>{
    const btn=document.createElement("button");
    btn.className='chip'+(state.h2===choice?' active':'');
    btn.innerHTML='<span class="dot"></span><span>'+choice+'</span>';
    btn.addEventListener("click",()=>{state.h2=(state.h2===choice)?null:choice; state.h3=null; renderRange();});
    elH2.appendChild(btn);
  });
  let inH2=bikesOnly;
  if(state.h2){
    inH2=bikesOnly.filter(r=>r.h2===state.h2);
    const h3Choices=[...new Set(inH2.map(r=>r.h3).filter(nonEmpty))].sort();
    elH3blk.classList.remove("hidden");
    elH3.innerHTML='';
    h3Choices.forEach(choice=>{
      const btn=document.createElement("button");
      btn.className='chip'+(state.h3===choice?' active':'');
      btn.innerHTML='<span class="dot"></span><span>'+choice+'</span>';
      btn.addEventListener("click",()=>{state.h3=(state.h3===choice)?null:choice; renderRange();});
      elH3.appendChild(btn);
    });
  }
  const finalRows=(state.h3?inH2.filter(r=>r.h3===state.h3):inH2);
  stats.textContent='Matching '+finalRows.length+' bike(s)';
  grid.innerHTML='';
  finalRows.forEach(r=> grid.appendChild(cardFor(r)));
}

/* ==============================
   PRODUCT DETAIL PAGE (+ Sticky Add-to-Basket)
============================== */
function renderDetail(){
  const row = getRowById(state.detailId);
  if(!row){ setActiveTab("all"); return; }

  const bar = document.getElementById("pd-sticky-bar");
  const titleWrap = document.getElementById("pd-sticky-title");
  const brandLogo = document.getElementById("pd-brand-logo");
  const priceWrap = document.getElementById("pd-price");
  titleWrap.innerHTML=""; priceWrap.innerHTML="";

  const kColour = findFilterKey("Filter Colour") || findFilterKey("Filter Color");
  const kHandle = findFilterKey("Filter Handlebar");
  const kSpeed  = findFilterKey("Filter Speed");
  const vColour = kColour ? (row.filters||{})[kColour] : "";
  const vHandle = kHandle ? (row.filters||{})[kHandle] : "";
  const vSpeed  = kSpeed  ? (row.filters||{})[kSpeed]  : "";

  [row.h2,row.h3,row.h2,vColour,vHandle,vSpeed].forEach(v=>{
    if(nonEmpty(v)){ const c=document.createElement("span"); c.className="chip"; c.textContent=v; titleWrap.appendChild(c); }
  });

  // Price
  const p = getPriceForSku(row.sku);
  if(p){
    priceWrap.innerHTML = nonEmpty(p.sale)
      ? `<span>${formatMoney(p.currency, p.sale)}</span><span class="strike ml-2">${formatMoney(p.currency, p.list)}</span>`
      : `<span>${formatMoney(p.currency, p.list)}</span>`;
  }
  // Mirror into side panel
  const priceSide = document.getElementById("pd-price-side");
  priceSide.innerHTML = priceWrap.innerHTML;

  if(nonEmpty(row.brand_logo)){ brandLogo.src=row.brand_logo; brandLogo.classList.remove("hidden"); }
  else { brandLogo.classList.add("hidden"); brandLogo.removeAttribute("src"); }
  bar.style.background = nonEmpty(row.sticky_bg) ? row.sticky_bg : "#F3F4F6";

  // images
  const viewport=document.getElementById("pd-carousel");
  viewport.innerHTML="";
  const imgs=(row.images && row.images.length ? row.images : [row.img]).filter(nonEmpty);
  if(!imgs.length) imgs.push("https://placehold.co/1200x900?text=No+Image");

  imgs.forEach(src=>{
    const slide=document.createElement("div");
    slide.className="carousel-item";
    slide.innerHTML=`<div class="aspect-[4/3] bg-neutral-100"><img src="${src}" class="w-full h-full object-contain bg-white" alt="Product image"></div>`;
    viewport.appendChild(slide);
  });

  let idx=0;
  function go(to){ idx=Math.max(0, Math.min(to, imgs.length-1)); viewport.scrollTo({left: viewport.clientWidth*idx, behavior:"smooth"}); }
  document.getElementById("pd-prev").onclick=()=>go(idx-1);
  document.getElementById("pd-next").onclick=()=>go(idx+1);
  let sx=0;
  viewport.addEventListener("pointerdown",(e)=>{sx=e.clientX; viewport.setPointerCapture(e.pointerId);});
  viewport.addEventListener("pointerup",(e)=>{const dx=e.clientX-sx; if(Math.abs(dx)>40){ if(dx<0) go(idx+1); else go(idx-1);} });

  // FULL SPECS
  const specsGrid=document.getElementById("pd-specs");
  specsGrid.innerHTML=""; let specsCount=0;
  (DATA.meta.specCols||[]).forEach(col=>{
    const val=row.spec[col];
    if(nonEmpty(val)){
      const kEl=document.createElement("div"); kEl.className="kv-key"; kEl.textContent=prettyLabelFromColumn(col);
      const vEl=document.createElement("div"); vEl.className="kv-val"; vEl.textContent=String(val);
      specsGrid.appendChild(kEl); specsGrid.appendChild(vEl); specsCount++;
    }
  });
  const specsEmpty=document.getElementById("pd-specs-empty");
  specsEmpty.classList.toggle("hidden", specsCount>0);

  // KEY SPECS (first 6 non-empty)
  const keyGrid = document.getElementById("pd-specs-key");
  keyGrid.innerHTML = "";
  let added = 0;
  for (const col of (DATA.meta.specCols || [])) {
    const val = row.spec[col];
    if (nonEmpty(val)) {
      const kEl=document.createElement("div"); kEl.className="kv-key"; kEl.textContent=prettyLabelFromColumn(col);
      const vEl=document.createElement("div"); vEl.className="kv-val"; vEl.textContent=String(val);
      keyGrid.appendChild(kEl); keyGrid.appendChild(vEl);
      if(++added >= 6) break;
    }
  }

  // DELIVERY
  const delGrid=document.getElementById("pd-delivery");
  const delEmpty=document.getElementById("pd-delivery-empty");
  delGrid.innerHTML=""; let delCount=0;
  (DATA.meta.deliveryCols||[]).forEach(col=>{
    const val=row.delivery[col];
    if(nonEmpty(val)){
      const kEl=document.createElement("div"); kEl.className="kv-key"; kEl.textContent=prettyLabelFromColumn(col);
      const vEl=document.createElement("div"); vEl.className="kv-val"; vEl.textContent=String(val);
      delGrid.appendChild(kEl); delGrid.appendChild(vEl); delCount++;
    }
  });
  delEmpty.classList.toggle("hidden", delCount>0);

  // Qty + Add to basket (right panel)
  const qtyInput=document.getElementById("qtyInput");
  document.getElementById("qtyMinus").onclick=()=>{ qtyInput.value=Math.max(1, (parseInt(qtyInput.value,10)||1)-1); };
  document.getElementById("qtyPlus").onclick =()=>{ qtyInput.value=(parseInt(qtyInput.value,10)||1)+1; };
  document.getElementById("btnAddToCart").onclick=()=>{
    const qty = Math.max(1, parseInt(qtyInput.value,10)||1);
    addToCart(row, qty);
    openCart(true);
  };

  // Sticky qty & add
  const stkQty = document.getElementById("pd-stk-qty");
  document.getElementById("pd-stk-qtyMinus").onclick = () => { stkQty.value = Math.max(1, (parseInt(stkQty.value,10)||1)-1); };
  document.getElementById("pd-stk-qtyPlus").onclick  = () => { stkQty.value = (parseInt(stkQty.value,10)||1)+1; };
  document.getElementById("pd-stk-add").onclick = () => {
    addToCart(row, Math.max(1, parseInt(stkQty.value,10)||1));
    openCart(true);
  };

  // Back to all products with scroll restore
  document.getElementById("btnBackToAll").onclick = () => {
    setActiveTab("all");
    document.querySelector('[data-tab="detail"]')?.classList.add("hidden");
    requestAnimationFrame(() => { window.scrollTo({ top: _allTabScrollY, behavior: "instant" }); });
  };
}

/* ==============================
   CHECKOUT JSON (builder + UI)
============================== */
function buildCheckoutPayload(items){
  const cc = currentCountryCode();
  let currency = null;
  const lines = items.map(it=>{
    const row = (DATA?.rows||[]).find(r => skuKey(r.sku)===skuKey(it.sku));
    const priceInfo = row ? getUnitPrice(row) : {currency:null, unit:null};
    if(!currency && priceInfo.currency) currency = priceInfo.currency;
    const unit_price = priceInfo.unit ?? null;
    const line_total = (unit_price!=null) ? Number(unit_price) * Number(it.qty||0) : null;

    return {
      sku: it.sku,
      quantity: it.qty || 1,
      attributes: {
        handlebar: it.handlebar || null,
        colour: it.colour || null,
        speed: it.speed || null,
        rack: it.rack || null
      },
      hierarchy: {
        h1: it.h1 || null,
        h2: it.h2 || null,
        h3: it.h3 || null,
        h4: it.h4 || null
      },
      bike_config_code: it.bike_config || null,
      image: it.img || null,
      unit_price: unit_price,
      line_total: line_total
    };
  });

  const subtotal = lines.reduce((a,l)=> a + (Number(l.line_total||0)), 0);
  return {
    version: "1.0",
    country: cc || null,
    currency: currency,
    item_count: items.reduce((a,b)=>a+(b.qty||0),0),
    subtotal: (currency && isFinite(subtotal)) ? Number(subtotal) : null,
    lines
  };
}
function openJsonModal(payload, titleMeta){
  const dlg = document.getElementById("jsonModal");
  const out = document.getElementById("jsonOutput");
  const meta = document.getElementById("jsonMeta");
  out.textContent = JSON.stringify(payload, null, 2);
  meta.textContent = titleMeta || "";
  dlg.showModal();
  dlg.querySelectorAll("[data-close]").forEach(b=> b.onclick = ()=> dlg.close());
  document.getElementById("jsonCopy").onclick = async ()=>{
    try{ await navigator.clipboard.writeText(out.textContent); }catch(e){}
  };
  document.getElementById("jsonDownload").onclick = ()=>{
    const blob = new Blob([out.textContent], {type:"application/json"});
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = `checkout_${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(a.href);
  };
}
function setupJsonExpand(rootEl, key, dataObj) {
  const btn = rootEl.querySelector(`[data-json-toggle="${key}"]`);
  const pre = rootEl.querySelector(`#orderjson-${key}`);
  const tools = rootEl.querySelector(`[data-json-tools="${key}"]`);
  let loaded = false;

  if (!btn || !pre) return;

  btn.addEventListener("click", () => {
    const willShow = pre.classList.contains("hidden");
    if (willShow && !loaded) {
      pre.textContent = JSON.stringify(dataObj || {}, null, 2);
      loaded = true;
    }
    pre.classList.toggle("hidden", !willShow);
    if (tools) tools.classList.toggle("hidden", !willShow);
    btn.textContent = willShow ? "Collapse" : "Expand";
  });
}


/* ==============================
   NETSUITE PAYLOAD (builder)
============================== */
function buildNetsuitePayload(order){
  const trandate = new Date().toISOString();
  return {
    "custbody_ar_close": false,
    "account": "1691",
    "entity": { "id": 4918 },
    "memo": order.id,                         // order number
    "exchangeRate": 1,
    "email": "nicolas@brompton.co.uk",
    "shippingAddress": {
      "addressee": "ND",
      "addr1": "450 15th St",
      "addr2": "Apt 1",
      "city": "Brooklyn",
      "state": "NY",
      "zip": "91505",
      "country": "US",
      "addrPhone": "9167385454"
    },
    "subsidiary": { "id": 15 },
    "location": { "id": 92 },
    "trandate": trandate,
    "tranId": "#P1010",
    "externalId": "#P1010",
    "otherRefNum": "#P1010",
    "department": { "id": 260 },
    "item": {
      "items": order.items.map((it, idx) => ({
        "line": idx + 1,
        "item": { "refname": String(it.sku || "").trim() },
        "quantity": Number(it.qty || 1),
        "amount": (() => {
          const row = (DATA?.rows||[]).find(r => skuKey(r.sku)===skuKey(it.sku));
          const pr = row ? getUnitPrice(row) : {unit:null};
          return pr.unit!=null ? Number(pr.unit) * Number(it.qty||0) : null;
        })(),
        "inventorylocation": { "id": 92 },
        "department": { "id": 260 }
      }))
    }
  };
}

/* ==============================
   CART + ORDERS (with pricing)
============================== */
function getOptionVals(row){
  const kColour = findFilterKey("Filter Colour") || findFilterKey("Filter Color");
  const kHandle = findFilterKey("Filter Handlebar");
  const kSpeed  = findFilterKey("Filter Speed");
  const kRack   = findFilterKey("Filter Rack");
  return {
    colour: kColour ? (row.filters||{})[kColour] : "",
    handlebar: kHandle ? (row.filters||{})[kHandle] : "",
    speed: kSpeed ? (row.filters||{})[kSpeed] : "",
    rack: kRack ? (row.filters||{})[kRack] : ""
  };
}
function addToCart(row, qty){
  const opts = getOptionVals(row);
  const key = JSON.stringify({sku: row.sku, ...opts});
  const existing = state.cart.items.find(i=>i._key===key);
  if(existing){ existing.qty += qty; }
  else{
    state.cart.items.push({
      _key:key,
      sku: row.sku,
      bike_config: row.bike_config || "",
      h1: row.h1, h2: row.h2, h3: row.h3, h4: row.h4,
      handlebar: opts.handlebar,
      colour: opts.colour,
      speed: opts.speed,
      rack: opts.rack,
      qty,
      img: row.images?.[0] || row.img || ""
    });
  }
  updateCartBadge(); renderCart(); persist();
}
function removeFromCart(key){
  state.cart.items = state.cart.items.filter(i=>i._key!==key);
  updateCartBadge(); renderCart(); persist();
}
function changeQty(key, delta){
  const it = state.cart.items.find(i=>i._key===key);
  if(!it) return;
  it.qty = Math.max(1, it.qty + delta);
  updateCartBadge(); renderCart(); persist();
}
function updateCartBadge(){
  const count = state.cart.items.reduce((a,b)=>a+b.qty,0);
  document.getElementById("cartCount").textContent = String(count);
}
function getCartTotals(){
  let currency=null, subtotal=0;
  state.cart.items.forEach(it=>{
    const row = (DATA?.rows||[]).find(r => skuKey(r.sku)===skuKey(it.sku));
    if(!row) return;
    const pr = getUnitPrice(row);
    if(pr.currency && !currency) currency = pr.currency;
    if(pr.unit!=null) subtotal += pr.unit * (it.qty||0);
  });
  return {currency, subtotal};
}
function renderCart(){
  const box=document.getElementById("cartLines");
  const sum=document.getElementById("cartSummary");
  const subtotalEl=document.getElementById("cartSubtotal");
  box.innerHTML=""; let n=0;

  state.cart.items.forEach(it=>{
    n+=it.qty;
    const row = (DATA?.rows||[]).find(r=> skuKey(r.sku)===skuKey(it.sku));
    const pr = row ? getUnitPrice(row) : {currency:null, unit:null};
    const lineTotal = (pr.unit!=null) ? pr.unit * (it.qty||0) : null;

    const line=document.createElement("div");
    line.className="line flex gap-3 items-start";
    line.innerHTML = `
      <img src="${it.img || 'https://placehold.co/80x60?text=Img'}" alt="" class="w-20 h-15 object-cover rounded">
      <div class="flex-1 min-w-0">
        <div class="text-sm font-semibold truncate">${[it.h1,it.h2,it.h4].filter(nonEmpty).join(" → ")}</div>
        <div class="text-xs text-neutral-600 break-words">
          <b>SKU:</b> ${it.sku}
          ${it.bike_config?` • <b>BikeConfigCode:</b> ${it.bike_config}`:""}
          ${it.handlebar?` • <b>Handlebar:</b> ${it.handlebar}`:""}
          ${it.speed?` • <b>Speed:</b> ${it.speed}`:""}
          ${it.colour?` • <b>Colour:</b> ${it.colour}`:""}
          ${it.rack?` • <b>Rack:</b> ${it.rack}`:""}
        </div>
        <div class="mt-1 flex items-center gap-2">
          <button class="px-2 py-1 border rounded text-sm" data-act="minus">−</button>
          <span class="text-sm w-6 text-center">${it.qty}</span>
          <button class="px-2 py-1 border rounded text-sm" data-act="plus">+</button>
          <button class="ml-2 px-2 py-1 border rounded text-sm" data-act="remove">Remove</button>
          <span class="ml-auto text-sm text-neutral-700">
            ${pr.unit!=null?`<span class="pill">Unit ${formatMoney(pr.currency, pr.unit)}</span>`:""}
            ${lineTotal!=null?`<span class="pill">Line ${formatMoney(pr.currency, lineTotal)}</span>`:""}
          </span>
        </div>
      </div>
    `;
    line.querySelector('[data-act="minus"]').onclick = ()=>changeQty(it._key,-1);
    line.querySelector('[data-act="plus"]').onclick  = ()=>changeQty(it._key,+1);
    line.querySelector('[data-act="remove"]').onclick= ()=>removeFromCart(it._key);
    box.appendChild(line);
  });
  sum.textContent = `${n} item(s)`;

  const totals = getCartTotals();
  subtotalEl.textContent = (totals.currency && isFinite(totals.subtotal))
    ? `Subtotal: ${formatMoney(totals.currency, totals.subtotal)}`
    : '';
}
function completeBasket(){
  if(!state.cart.items.length) return;
  const orderId = 'ORD-' + Date.now();
  const payload = buildCheckoutPayload(state.cart.items);

  const order = {
    id: orderId,
    dateISO: new Date().toISOString(),
    status: "Saved",
    items: JSON.parse(JSON.stringify(state.cart.items)),
    summary: state.cart.items.reduce((a,b)=>a+b.qty,0),
    country: payload.country || null,
    currency: payload.currency || null,
    subtotal: payload.subtotal,
    checkout_payload: payload,
    netsuitePayload: null
  };
  state.orders.unshift(order);

  state.cart.items = [];
  updateCartBadge(); renderCart(); renderOrders();
  setActiveTab("order"); openCart(false); persist();
}

/* Submit / Delete order */
function submitOrder(orderId){
  const o = state.orders.find(x => x.id === orderId);
  if(!o) return;
  o.netsuitePayload = buildNetsuitePayload(o);
  o.status = "Submitted to supplier";
  persist();
  renderOrders();
}
function deleteOrder(orderId){
  state.orders = state.orders.filter(x => x.id !== orderId);
  persist();
  renderOrders();
}

/* Orders summary + drilldown */
function summarizeH2H3(items){
  const map=new Map();
  items.forEach(it=>{
    const k=[it.h2||"", it.h3||""].filter(nonEmpty).join(" • ") || "(Uncategorized)";
    map.set(k, (map.get(k)||0) + (it.qty||0));
  });
  return [...map.entries()].sort((a,b)=>a[0].localeCompare(b[0]));
}
function renderOrderTree(order, container){
  container.innerHTML="";
  const byH1 = groupBy(order.items, it=>it.h1 || "(No H1)");
  byH1.forEach((itemsH1, h1)=>{
    const h1Sum=sumQty(itemsH1);
    const d1=document.createElement("details");
    d1.className="lvl";
    d1.innerHTML = `<summary class="cursor-pointer font-semibold">${h1} — <span class="text-neutral-600">${h1Sum} item(s)</span></summary>`;
    container.appendChild(d1);

    const byH2 = groupBy(itemsH1, it=>it.h2 || "(No H2)");
    byH2.forEach((itemsH2, h2)=>{
      const h2Sum=sumQty(itemsH2);
      const d2=document.createElement("details");
      d2.className="lvl ml-3";
      d2.innerHTML = `<summary class="cursor-pointer font-medium">${h2} — <span class="text-neutral-600">${h2Sum} item(s)</span></summary>`;
      d1.appendChild(d2);

      const byH3 = groupBy(itemsH2, it=>it.h3 || "(No H3)");
      byH3.forEach((itemsH3, h3)=>{
        const h3Sum=sumQty(itemsH3);
        const d3=document.createElement("details");
        d3.className="lvl ml-6";
        d3.innerHTML = `<summary class="cursor-pointer">${h3} — <span class="text-neutral-600">${h3Sum} item(s)</span></summary>`;
        d2.appendChild(d3);

        itemsH3.forEach(it=>{
          const leaf=document.createElement("div");
          leaf.className="leaf-line ml-9 mt-2";
          leaf.innerHTML = `
            <img src="${it.img || 'https://placehold.co/80x60?text=Img'}" class="w-16 h-12 object-cover rounded" alt="">
            <div class="text-sm">
              <div class="font-medium">SKU: ${it.sku}</div>
              <div class="text-xs text-neutral-600">
                ${it.bike_config?`<b>BikeConfigCode:</b> ${it.bike_config} • `:""}
                ${it.handlebar?`<b>Handlebar:</b> ${it.handlebar} • `:""}
                ${it.speed?`<b>Speed:</b> ${it.speed} • `:""}
                ${it.colour?`<b>Colour:</b> ${it.colour} • `:""}
                ${it.rack?`<b>Rack:</b> ${it.rack} • `:""}
                <b>Qty:</b> ${it.qty}
              </div>
            </div>
          `;
          d3.appendChild(leaf);
        });
      });
    });
  });
}
function renderOrders(){
  const list=document.getElementById("ordersList");
  const empty=document.getElementById("ordersEmpty");
  const meta=document.getElementById("ordersMeta");
  list.innerHTML="";
  if(!state.orders.length){
    empty.classList.remove("hidden");
    meta.textContent = "";
    return;
  }
  empty.classList.add("hidden");
  meta.textContent = `${state.orders.length} order(s)`;

  state.orders.forEach(o=>{
    const details=document.createElement("details");
    details.className="order";
    const sumPairs=summarizeH2H3(o.items);
    const pills=sumPairs.map(([k,c])=>`<span class="order-summary-pill"><b>${k}</b> <span class="text-neutral-500">— ${c}</span></span>`).join(" ");
    const money = (o.currency && isFinite(o.subtotal)) ? formatMoney(o.currency, o.subtotal) : null;

    details.innerHTML = `
      <summary class="p-3 flex items-center justify-between">
        <div class="px-3 py-2">
          <div class="font-semibold">Order ${o.id}</div>
          <div class="text-xs text-neutral-500">
            ${o.country?`<span class="pill">Country ${o.country}</span>`:""}
            ${o.currency?`<span class="pill">Currency ${o.currency}</span>`:""}
            ${money?`<span class="pill">Subtotal ${money}</span>`:""}
            <span class="pill">${o.status || 'Saved'}</span>
          </div>
        </div>
        <div class="flex flex-wrap gap-2 pr-3">${pills || '<span class="text-sm text-neutral-500">0 items</span>'}</div>
      </summary>
      <div class="px-3 pb-3 space-y-4">
        <div class="flex items-center gap-2">
          ${o.status==="Saved" ? `
            <button class="btn btn-primary" data-submit="${o.id}">Submit to supplier</button>
            <button class="btn" data-del="${o.id}">Delete</button>
          ` : `
            <span class="text-sm text-green-700">Order submitted to supplier.</span>
          `}
        </div>

        <div class="text-sm text-neutral-600">Drill down by hierarchy to see line details.</div>
        <div class="order-card p-3" id="tree-${o.id}"></div>

       <div class="mt-3">
          <div class="flex items-center justify-between">
            <div class="font-semibold">Saved Checkout JSON (for internal review)</div>
            <button class="btn text-sm" data-json-toggle="co-${o.id}">Expand</button>
          </div>
          <pre class="json-box mono hidden" id="orderjson-co-${o.id}"></pre>
        </div>

        <div class="mt-3">
          <div class="flex items-center justify-between">
            <div class="font-semibold">Generated NetSuite Payload (read-only)</div>
            <button class="btn text-sm" data-json-toggle="ns-${o.id}">Expand</button>
          </div>
          <pre class="json-box mono hidden" id="orderjson-ns-${o.id}"></pre>
          <div class="mt-2 flex gap-2 hidden" data-json-tools="ns-${o.id}">
            <button class="btn" data-copy-ns="${o.id}">Copy</button>
            <button class="btn btn-primary" data-dl-ns="${o.id}">Download JSON</button>
          </div>
    </div>
      </div>
    `;
    list.appendChild(details);
    // JSON expand/collapse + lazy fill
    setupJsonExpand(details, `co-${o.id}`, o.checkout_payload);
    setupJsonExpand(details, `ns-${o.id}`, o.netsuitePayload);

    // Render tree on first open
    let rendered=false;
    details.addEventListener("toggle", ()=>{
      if(details.open && !rendered){
        const container=details.querySelector(`#tree-${o.id}`);
        renderOrderTree(o, container);
        rendered=true;
      }
    });

    // Submit / delete
    const submitBtn = details.querySelector(`[data-submit="${o.id}"]`);
    if(submitBtn){ submitBtn.onclick = () => submitOrder(o.id); }
    const delBtn = details.querySelector(`[data-del="${o.id}"]`);
    if(delBtn){ delBtn.onclick = () => deleteOrder(o.id); }

    // Copy / download NetSuite payload
    const copyNs = details.querySelector(`[data-copy-ns="${o.id}"]`);
    if(copyNs){
      copyNs.onclick = async ()=>{
        const pre = document.getElementById(`orderjson-ns-${o.id}`);
        try{ await navigator.clipboard.writeText(pre.textContent); }catch(e){}
      };
    }
    const dlNs = details.querySelector(`[data-dl-ns="${o.id}"]`);
    if(dlNs){
      dlNs.onclick = ()=>{
        const pre = document.getElementById(`orderjson-ns-${o.id}`);
        const blob = new Blob([pre.textContent], {type:"application/json"});
        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = `netsuite_${o.id}.json`;
        a.click();
        URL.revokeObjectURL(a.href);
      };
    }
  });
}

/* Drawer open/close with overlay + header offset */
function openCart(open){
  const drawer = document.getElementById("cartDrawer");
  const overlay = document.getElementById("cartOverlay");
  const header  = document.querySelector("header");
  if(open){
    const top = header ? header.getBoundingClientRect().height : 0;
    drawer.style.top = `${top}px`;
    overlay.classList.remove("hidden");
    drawer.classList.add("open");
  } else {
    overlay.classList.add("hidden");
    drawer.classList.remove("open");
  }
}

/* Persist simple state in localStorage */
function persist(){
  try{
    localStorage.setItem("bike_app_orders", JSON.stringify(state.orders));
    localStorage.setItem("bike_app_cart", JSON.stringify(state.cart));
  }catch(e){}
}
function restore(){
  try{
    const o = JSON.parse(localStorage.getItem("bike_app_orders")||"[]");
    const c = JSON.parse(localStorage.getItem("bike_app_cart")||'{"items":[]}');
    if(Array.isArray(o)) state.orders=o;
    if(c && Array.isArray(c.items)) state.cart=c;
  }catch(e){}
}

/* ==============================
   PRICE LIST BUILD
============================== */
function buildPriceMap(parsed){
  const rows = parsed.data || [];
  const fields = parsed.meta.fields || [];
  function getByHeaderOrIndex(row, headerName, idx){
    if(fields && fields.includes(headerName)) return row[headerName];
    const vals = Object.values(row);
    return vals[idx];
  }
  const map={};
  rows.forEach(r=>{
    const ccRaw   = getByHeaderOrIndex(r, "Price List Name", 1);
    const skuRaw  = getByHeaderOrIndex(r, "SKU", 4);
    const currRaw = getByHeaderOrIndex(r, "Currency", 5);
    const listRaw = getByHeaderOrIndex(r, "Full Price", 6);
    const saleRaw = getByHeaderOrIndex(r, "Sale Price", 7);

    const cc  = String(ccRaw||"").trim().toUpperCase();
    const sku = skuKey(skuRaw);
    if(!cc || !sku) return;

    const currency = String(currRaw||"").trim().toUpperCase();
    const list = (listRaw==null || listRaw==="") ? null : Number(listRaw);
    const sale = (saleRaw==null || saleRaw==="") ? null : Number(saleRaw);

    if(!map[cc]) map[cc] = {};
    map[cc][sku] = { currency, list, sale };
  });
  state.priceMap = map;
}

/* ==============================
   COUNTRY SELECT
============================== */
function buildCountrySelect(){
  const sel=document.getElementById("countrySelect"); sel.innerHTML="";
  if(!countryCols.length){
    const opt=document.createElement("option"); opt.value="0"; opt.textContent="ALL"; sel.appendChild(opt);
    sel.disabled=true;
    return;
  }
  countryCodes.forEach((code,idx)=>{ const opt=document.createElement("option"); opt.value=idx; opt.textContent=code; sel.appendChild(opt); });

  let picked=0;
  for(let i=0;i<countryCols.length;i++){ if((DATA.rows||[]).some(r=>truthy((r.countries||{})[countryCols[i]]))){picked=i;break;} }

  const saved = localStorage.getItem("bike_app_country_index");
  if(saved!=null && countryCols[Number(saved)]) picked = Number(saved);

  sel.value=String(picked); sel.disabled=false; state.countryIndex=picked;

  sel.addEventListener("change",e=>{
    state.countryIndex=parseInt(e.target.value,10);
    localStorage.setItem("bike_app_country_index", String(state.countryIndex));
    clearAllFilters();
    buildProgressiveFilters();
    renderAll();
    renderRange();
    renderCart();
    if(state.detailId!=null) renderDetail();
  });
}

/* ==============================
   FILE LOADERS (CSV & PRICE)
============================== */
const loadCsvBtn = document.getElementById("loadCsvBtn");
const csvInput   = document.getElementById("csvInput");
loadCsvBtn.addEventListener("click",()=>csvInput.click());
csvInput.addEventListener("change",(e)=>{
  const file = e.target.files?.[0];
  if(!file) return;
  Papa.parse(file, {
    header: true,
    skipEmptyLines: true,
    complete: (res)=>{
      buildDATA(res);
      buildCountrySelect();
      buildHierarchyPanel(); // no-op
      buildProgressiveFilters();
      renderAll();
      renderRange();
      renderCart();
      if(state.detailId!=null) renderDetail();
    }
  });
});

const loadPriceBtn = document.getElementById("loadPriceBtn");
const priceInput   = document.getElementById("priceInput");
loadPriceBtn.addEventListener("click",()=>priceInput.click());
priceInput.addEventListener("change",(e)=>{
  const file = e.target.files?.[0];
  if(!file) return;
  Papa.parse(file, {
    header: true,
    skipEmptyLines: true,
    complete: (res)=>{
      buildPriceMap(res);
      // Refresh prices everywhere
      renderAll();
      renderRange();
      renderCart();
      if(state.detailId!=null) renderDetail();
    }
  });
});

/* ==============================
   HEADER CART UI + NAV + BOOT
============================== */
document.getElementById("btnCart").onclick = ()=>openCart(true);
document.getElementById("cartClose").onclick = ()=>openCart(false);
document.getElementById("cartClear").onclick = ()=>{
  state.cart.items = [];
  updateCartBadge(); renderCart(); persist();
};
document.getElementById("cartComplete").onclick = completeBasket;
document.getElementById("cartExportJson").onclick = ()=>{
  if(!state.cart.items.length) return;
  const payload = buildCheckoutPayload(state.cart.items);
  openJsonModal(payload, `Country: ${payload.country || 'N/A'} • Currency: ${payload.currency || 'N/A'} • Items: ${payload.item_count}`);
};
document.getElementById("cartOverlay").onclick = ()=>openCart(false);

document.querySelectorAll(".btn-tab").forEach(btn=>btn.addEventListener("click",()=>setActiveTab(btn.dataset.tab)));

document.getElementById("expandAll").onclick = ()=>{
  document.querySelectorAll("#grid details").forEach(d => d.open = true);
};
document.getElementById("collapseAll").onclick = ()=>{
  document.querySelectorAll("#grid details").forEach(d => d.open = false);
};

// init sort control (persist + re-render)
(function initSort(){
  const sel = document.getElementById("sortMode");
  if(sel){
    sel.value = getSortMode();
    sel.addEventListener("change", e => { setSortMode(e.target.value); renderAll(); });
  }
})();

/* ==============================
   BOOTSTRAP
============================== */
restore();
setActiveTab("all");
buildHierarchyPanel(); // no-op
renderOrders();
updateCartBadge();
renderCart();
</script>
</body>
</html>
